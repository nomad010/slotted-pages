✔ Finish extended page implementation @done(20-06-13 23:45)
  ✔ Make entries 3 bytes @done(20-06-10 14:21)
  ✔ Add references @started(20-06-10 14:21) @done(20-06-13 23:45) @lasted(3d9h24m12s)
    ✔ Add a helper struct to make adding/getting references easier. @done(20-06-13 23:45)
  ✔ Replace native endian calls. @started(20-06-10 15:29) @done(20-06-10 15:29) @lasted(40s)
✔ Add in-memory representation to facilitate testing. @done(20-06-10 16:25)
[] Add Extended representation that is safe to read from multiple sources.
✔ Replace serialized usizes with u64/u32 @done(20-06-14 00:05)
[] Add more tests for complex data structures
[] Use separate counters for the various page metadata.
   This will make a transition to the atomic page versions easier.
   ✔ Remove the additional_segments calls - can be calculated from the bytes length. @done(20-06-14 23:52)
   [] Store an additional num_entries variable.
   [] Store an additional used_space_start variable.
   [] Make a flush method to flush these to the bytes of the page.
[] Refactor
[] Document
[] Look at pages that are 8K, 16K, 32K, 64K in size.
✔ Add a root entry pointer to the file header. @done(20-06-16 23:38)
[] Write a garbage collector and defragmentor program/library.
  [] Delete entries not visible from the root entry.
  [] Shift entries and correct references that point to them.
✔ Should rollback be allowed? @done(20-06-18 22:48)
  This would make extended implementations a lot more difficult to support. We would need to add
  the entries as a separate field that allows for concurrent modifications. We would need to
  reserialize the entries again.

  Verdict: Nope.
[] Replace marker with a checksum in the page.
[] Remove SegmentController trait with just Write + Read + Seek Bounds
[] Add Serialize/Deserialize Traits and Lazy struct